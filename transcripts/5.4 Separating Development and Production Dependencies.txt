00:01 Let's discuss separating development 
00:04 and production dependencies for your programs.
00:07 A common challenge with Python dependency management 
00:10 in the real world is that your development 
00:13 and continuous integration environments 
00:15 need additional dependencies that the production environment doesn't need. 
00:19 For example, your development environment might need 
00:22 additional testing frameworks, debuggers or profiling tools 
00:25 that are not really necessary in production, 
00:28 and might actually slow things down. 
00:30 The same would be true for you continuous integration environment.
00:34 If you're running any kind of automated tests, 
00:36 you probably want to include testing frameworks 
00:39 and all kinds of other supporting tools for that on your built server environment. 
00:44 But again, with all of this, the goal is for the production environment 
00:47 to still run lean and mean; now the good news is that 
00:52 there is actually a requirements files workflow that is well known 
00:55 and often used in the Python community that solves this problem. 
00:59 The solution here is to create two different requirements files, 
01:04 one for development dependencies, and one for production dependencies, 
01:09 typically, these would be called requirements-dev.txt 
01:13 for the development dependencies, 
01:17 and requirements.txt for the production dependencies. 
01:20 There is a feature in pip that allows you to link up requirements files 
01:23 so you can make this workflow very convenient for developers. 
01:27 They only need to remember to install the requirements-dev file 
01:31 and that will automatically pull in 
01:33 and install all of the production dependencies as well, 
01:36 let's take a look at a real world example for this technique. 
01:39 So I am looking at Love here which is a Python web application 
01:44 that was created by the fine folks at Yelp, 
01:47 and you are going to see in a minute now that they are using 
01:50 the exact same pattern for managing their development in production dependencies. 
01:55 So right now, I am in the root folder of this repository here and when I scroll down, 
01:59 I'll find those two requirements files, so there is a requirements.txt 
02:05 and then there is also a requirements-dev.txt. 
02:09 And this is exactly the split that I talked about earlier, 
02:13 so when you look at requirements.txt you can see that this includes
02:18 all of the production dependencies in their exact versions, 
02:21 and nicely enough, they actually put a little comment here 
02:25 to explain what is going on, 
02:28 I think this is a really great use of the commenting feature 
02:30 that you can use in requirements files by the way. 
02:33 So, these are just the production dependencies that would be necessary
02:36 to run the application in a production environment, 
02:38 now let's look at the other requirements files. 
02:41 So there is also this requirements-dev.txt and what this does, 
02:47 it first of all pulls in the production requirements
02:52 and then it installs a bunch of additional development dependencies, 
02:56 so it pulls in a testing framework and the mark module, 
03:01 and some other modules that are useful during development
03:05 but not really on a production machine. 
03:08 And what's interesting here is that for some of the dependencies 
03:11 they actually pin them to specific version, 
03:14 so every time you specify an exact version that is called pinning, 
03:18 and this is our version pinning and this is exactly what they do here. 
03:21 But then for this other dependency called ipdb 
03:25 which is an enhanced version of the Python debugger, 
03:28 they do not pin the dependency and this makes a lot of sense 
03:31 because the ipdb debugger would never actually run on an automated test server, 
03:36 but it's more something that a developer would run on their local machine. 
03:39 So it might make sense to leave that dependency unpinned 
03:43 so it will always upgrade to the latest version.
03:45 Now, again you can see here that they put this little header explaining 
03:49 what is going on in this file, and I think this is really helpful. 
03:52 Now these two requirements files cover the two usecases we discussed earlier. 
03:56 So if a developer wants to set this up on a new machine, 
03:59 they would clone the repository and then run pip install-r requirements-dev.txt
04:05 and this brings in all of the development dependencies, 
04:09 but every time the application gets deployed onto a production system, 
04:13 all that happens is a pip install-r requirements.txt 
04:18 so that only the production dependencies are brought in. 
04:23 If you're building a web application this workflow is specifically supported 
04:27 by platforms like Heroku, so what Heroku does 
04:30 when you deploy a web application to it, 
04:34 is it will look for a requirements.txt file 
04:37 in the root of your source repository and try to install those dependencies, 
04:41 so if you follow the requirements.txt and requirements-dev.txt split, 
04:47 it will only install the production dependencies 
04:50 and not the testing dependencies which is exactly what you want. 
04:53 I like this workflow because it is simple but also highly flexible.
